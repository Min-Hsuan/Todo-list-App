{"ast":null,"code":"var _jsxFileName = \"/Users/mission/Documents/react-project-practice2/src/store/TaskProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport TaskContext from './task-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  tasks: []\n};\n\nconst taskReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const enteredTaskIndex = state.tasks.findIndex(task => task.id === action.task.id);\n    const enteredTask = state.tasks[enteredTaskIndex];\n    let updateTasks;\n\n    if (enteredTask) {\n      updateTasks = [...state.tasks];\n      updateTasks[enteredTaskIndex] = action.task;\n    } else {\n      updateTasks = state.tasks.concat(action.task);\n    }\n\n    return {\n      tasks: updateTasks\n    };\n  }\n\n  return initialState;\n};\n\nconst TaskProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(taskReducer, initialState);\n\n  const addTaskHandler = task => {\n    dispatch({\n      type: 'ADD',\n      task: task\n    });\n  };\n\n  const changeStateHandler = state => {\n    dispatch({\n      type: 'STATE',\n      state: state\n    });\n  };\n\n  const taskContext = {\n    tasks: state.tasks,\n    addTask: addTaskHandler\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: taskContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TaskProvider, \"UrEkDPQH5U12xnblC9PjDJeyoVE=\");\n\n_c = TaskProvider;\nexport default TaskProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"sources":["/Users/mission/Documents/react-project-practice2/src/store/TaskProvider.js"],"names":["React","useReducer","TaskContext","initialState","tasks","taskReducer","state","action","type","enteredTaskIndex","findIndex","task","id","enteredTask","updateTasks","concat","TaskProvider","props","dispatch","addTaskHandler","changeStateHandler","taskContext","addTask","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAClC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AACvB,UAAMC,gBAAgB,GAAGH,KAAK,CAACF,KAAN,CAAYM,SAAZ,CAAsBC,IAAI,IAAGA,IAAI,CAACC,EAAL,KAAWL,MAAM,CAACI,IAAP,CAAYC,EAApD,CAAzB;AACA,UAAMC,WAAW,GAAEP,KAAK,CAACF,KAAN,CAAYK,gBAAZ,CAAnB;AACA,QAAIK,WAAJ;;AACA,QAAGD,WAAH,EAAe;AACbC,MAAAA,WAAW,GAAG,CAAC,GAAGR,KAAK,CAACF,KAAV,CAAd;AACAU,MAAAA,WAAW,CAACL,gBAAD,CAAX,GAAgCF,MAAM,CAACI,IAAvC;AACD,KAHD,MAGK;AACHG,MAAAA,WAAW,GAAGR,KAAK,CAACF,KAAN,CAAYW,MAAZ,CAAmBR,MAAM,CAACI,IAA1B,CAAd;AACD;;AACD,WAAO;AAACP,MAAAA,KAAK,EAAEU;AAAR,KAAP;AAED;;AAED,SAAOX,YAAP;AACD,CAhBD;;AAiBA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE9B,QAAM,CAACX,KAAD,EAAOY,QAAP,IAAiBjB,UAAU,CAACI,WAAD,EAAeF,YAAf,CAAjC;;AACA,QAAMgB,cAAc,GAAIR,IAAD,IAAQ;AAC7BO,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAC,KAAN;AAAaG,MAAAA,IAAI,EAAEA;AAAnB,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMS,kBAAkB,GAAId,KAAD,IAAS;AAClCY,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAE,OAAP;AAAgBF,MAAAA,KAAK,EAAEA;AAAvB,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMe,WAAW,GAAE;AACjBjB,IAAAA,KAAK,EAAEE,KAAK,CAACF,KADI;AAEjBkB,IAAAA,OAAO,EAAGH;AAFO,GAAnB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cAA2CJ,KAAK,CAACM;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;GAAMP,Y;;KAAAA,Y;AAoBN,eAAeA,YAAf","sourcesContent":["import React, {useReducer } from 'react';\nimport TaskContext from './task-context';\n\nconst initialState = {\n  tasks: [],\n}\nconst taskReducer = (state,action)=>{\n  if(action.type === 'ADD'){\n    const enteredTaskIndex = state.tasks.findIndex(task=> task.id=== action.task.id)\n    const enteredTask= state.tasks[enteredTaskIndex]\n    let updateTasks;\n    if(enteredTask){\n      updateTasks = [...state.tasks]\n      updateTasks[enteredTaskIndex] = action.task\n    }else{\n      updateTasks = state.tasks.concat(action.task);\n    }\n    return {tasks: updateTasks };\n    \n  }\n \n  return initialState;\n}\nconst TaskProvider = (props) => {\n\n  const [state,dispatch]=useReducer(taskReducer , initialState)\n  const addTaskHandler = (task)=>{\n    dispatch({type:'ADD', task: task})\n  }\n  const changeStateHandler = (state)=>{\n    dispatch({type: 'STATE', state: state})\n  }\n\n  const taskContext ={\n    tasks: state.tasks,\n    addTask : addTaskHandler,\n  }\n\n\n\n  return <TaskContext.Provider value={taskContext}>{props.children}</TaskContext.Provider>;\n};\n\nexport default TaskProvider;\n"]},"metadata":{},"sourceType":"module"}