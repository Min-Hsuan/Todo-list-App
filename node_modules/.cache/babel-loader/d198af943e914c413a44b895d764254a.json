{"ast":null,"code":"var _jsxFileName = \"/Users/mission/Documents/react-practice-to do list/src/component/Task/TaskBlock.js\",\n    _s = $RefreshSig$();\n\nimport classes from './TaskBlock.module.css';\nimport { useEffect, useState } from 'react';\nimport NewTask from './NewTask';\nimport TaskItem from './TaskItem'; // import TaskContext from '../../store/task-context';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst todoListFn = items => {\n  return items.filter(task => task.state === false);\n};\n\nconst doneListFn = items => {\n  return items.filter(task => task.state === true);\n};\n\nconst TaskBlock = props => {\n  _s();\n\n  // const taskCtx = useContext(TaskContext);\n  // const [tasks, setTasks] = useState([]);\n  const {\n    onAdd,\n    onDelete,\n    onToggle,\n    onDeleteDone,\n    tasks\n  } = props;\n  const [isShown, setIsShown] = useState(false);\n  const filteredDoneTask = tasks.filter(task => task.state === true);\n  const filteredTodoTask = tasks.filter(task => task.state === false); // useEffect(()=>{\n  //   const storedTasks = JSON.parse(localStorage.getItem('TASKS'));\n  //   setTasks(storedTasks)\n  // },[])\n  // useEffect(()=>{\n  //   localStorage.setItem('TASKS',JSON.stringify(tasks))\n  // },[tasks])\n  // const addTaskHandler = (taskObj) => {\n  //     setTasks((prevTasks) => [taskObj, ...prevTasks]);\n  //     // const lastestTasks = [taskObj ,...tasks ]\n  //     setIsShown(false);\n  //     const tabNumObj = {\n  //       todoNum:  tasks.filter((task) => task.state === false).length,\n  //       doneNum:  tasks.filter((task) => task.state === true).length,\n  //       allNum: tasks.length,\n  //     };\n  //     props.onTaskNum(tabNumObj);\n  //     console.log(tabNumObj)\n  // };\n  // const checkboxChangeHandler = (updateObj) => {\n  //   const clickItemIndex = tasks.findIndex((task) => task.id === updateObj.id);\n  //   const clickItem = tasks[clickItemIndex];\n  //   const updatedTask = { ...clickItem, state: updateObj.state };\n  //   let updatedTasks = [...tasks];\n  //   updatedTasks[clickItemIndex] = updatedTask;\n  //   setTasks(updatedTasks);\n  //   const tabNumObj = {\n  //     todoNum: todoListFn(updatedTasks).length,\n  //     doneNum: doneListFn(updatedTasks).length,\n  //     allNum: updatedTasks.length,\n  //   };\n  //   props.onTaskNum(tabNumObj);\n  // };\n\n  const showNewTaskHandler = event => {\n    event.stopPropagation();\n    setIsShown(true);\n  };\n\n  const closeNewTaskHandler = event => {\n    event.stopPropagation();\n    setIsShown(false);\n  }; // const deleteTaskHandler = (id) => {\n  //   const updatedTasks = tasks.filter((task) => task.id !== id);\n  //   setTasks(updatedTasks);\n  // };\n  // const deleteDoneTaskHandler = () => {\n  //   const updatedTasks = tasks.filter((task) => task.state === false);\n  //   setTasks(updatedTasks);\n  //   const tabNumObj = {\n  //     todoNum: todoListFn(updatedTasks).length,\n  //     doneNum: doneListFn(updatedTasks).length,\n  //     allNum: updatedTasks.length,\n  //   };\n  //   props.onTaskNum(tabNumObj);\n  // };\n\n\n  let taskList = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u6C92\\u6709\\u63D0\\u9192\\u4E8B\\u9805\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 18\n  }, this);\n\n  let filteredNum = 0;\n  let tabTitleColor = classes.todo;\n\n  if (props.title === '已完成') {\n    filteredNum = filteredDoneTask.length;\n    tabTitleColor = classes.done;\n    taskList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredDoneTask.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        id: task.id,\n        state: task.state,\n        value: task.value,\n        onDelete: onDelete,\n        onChangeState: onToggle\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (props.title === '未完成') {\n    filteredNum = filteredTodoTask.length;\n    tabTitleColor = classes.todo;\n    taskList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTodoTask.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        id: task.id,\n        state: task.state,\n        value: task.value,\n        onDelete: onDelete,\n        onChangeState: onToggle\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (props.title === '全部') {\n    filteredNum = tasks.length;\n    tabTitleColor = classes.all;\n    taskList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        id: task.id,\n        value: task.value,\n        state: task.state,\n        onDelete: onDelete,\n        onChangeState: onToggle\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes['tab-block'],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.backdrop,\n      onClick: closeNewTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes['tab-title']} ${tabTitleColor}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: filteredNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), taskList, isShown && /*#__PURE__*/_jsxDEV(NewTask, {\n      addTask: addTaskHandler,\n      onCloseNew: closeNewTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes['clean-done'],\n        onClick: onDeleteDone,\n        children: \"\\u6E05\\u9664\\u5DF2\\u5B8C\\u6210\\u9805\\u76EE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes['button-add'],\n        onClick: showNewTaskHandler,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskBlock, \"AfL4AMulNN2iutG1qDR77gnp7oc=\");\n\n_c = TaskBlock;\nexport default TaskBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBlock\");","map":{"version":3,"sources":["/Users/mission/Documents/react-practice-to do list/src/component/Task/TaskBlock.js"],"names":["classes","useEffect","useState","NewTask","TaskItem","todoListFn","items","filter","task","state","doneListFn","TaskBlock","props","onAdd","onDelete","onToggle","onDeleteDone","tasks","isShown","setIsShown","filteredDoneTask","filteredTodoTask","showNewTaskHandler","event","stopPropagation","closeNewTaskHandler","taskList","filteredNum","tabTitleColor","todo","title","length","done","map","id","value","all","backdrop","addTaskHandler","actions"],"mappings":"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","sourcesContent":["import classes from './TaskBlock.module.css';\nimport { useEffect, useState } from 'react';\nimport NewTask from './NewTask';\nimport TaskItem from './TaskItem';\n// import TaskContext from '../../store/task-context';\n\nconst todoListFn = (items)=>{return items.filter((task) => task.state === false)}\nconst doneListFn = (items)=>{return items.filter((task) => task.state === true)}\nconst TaskBlock = (props) => {\n  // const taskCtx = useContext(TaskContext);\n\n  // const [tasks, setTasks] = useState([]);\n  const {onAdd,onDelete,onToggle,onDeleteDone,tasks} = props;\n  const [isShown, setIsShown] = useState(false);\n  const filteredDoneTask = tasks.filter((task) => task.state === true);\n  const filteredTodoTask = tasks.filter((task) => task.state === false);\n  \n\n  // useEffect(()=>{\n  //   const storedTasks = JSON.parse(localStorage.getItem('TASKS'));\n  //   setTasks(storedTasks)\n  // },[])\n\n  // useEffect(()=>{\n  //   localStorage.setItem('TASKS',JSON.stringify(tasks))\n  // },[tasks])\n\n  // const addTaskHandler = (taskObj) => {\n  //     setTasks((prevTasks) => [taskObj, ...prevTasks]);\n  //     // const lastestTasks = [taskObj ,...tasks ]\n  //     setIsShown(false);\n  //     const tabNumObj = {\n  //       todoNum:  tasks.filter((task) => task.state === false).length,\n  //       doneNum:  tasks.filter((task) => task.state === true).length,\n  //       allNum: tasks.length,\n  //     };\n  //     props.onTaskNum(tabNumObj);\n  //     console.log(tabNumObj)\n  // };\n  // const checkboxChangeHandler = (updateObj) => {\n  //   const clickItemIndex = tasks.findIndex((task) => task.id === updateObj.id);\n  //   const clickItem = tasks[clickItemIndex];\n\n  //   const updatedTask = { ...clickItem, state: updateObj.state };\n  //   let updatedTasks = [...tasks];\n  //   updatedTasks[clickItemIndex] = updatedTask;\n  //   setTasks(updatedTasks);\n\n  //   const tabNumObj = {\n  //     todoNum: todoListFn(updatedTasks).length,\n  //     doneNum: doneListFn(updatedTasks).length,\n  //     allNum: updatedTasks.length,\n  //   };\n  //   props.onTaskNum(tabNumObj);\n  // };\n\n  const showNewTaskHandler = (event) => {\n    event.stopPropagation();\n    setIsShown(true);\n  };\n  const closeNewTaskHandler = (event) => {\n    event.stopPropagation();\n    setIsShown(false);\n  };\n  // const deleteTaskHandler = (id) => {\n  //   const updatedTasks = tasks.filter((task) => task.id !== id);\n  //   setTasks(updatedTasks);\n  // };\n  // const deleteDoneTaskHandler = () => {\n  //   const updatedTasks = tasks.filter((task) => task.state === false);\n  //   setTasks(updatedTasks);\n\n  //   const tabNumObj = {\n  //     todoNum: todoListFn(updatedTasks).length,\n  //     doneNum: doneListFn(updatedTasks).length,\n  //     allNum: updatedTasks.length,\n  //   };\n  //   props.onTaskNum(tabNumObj);\n  // };\n  let taskList = <p>沒有提醒事項</p>;\n  let filteredNum = 0;\n  let tabTitleColor = classes.todo;\n\n  if (props.title === '已完成') {\n    filteredNum = filteredDoneTask.length;\n    tabTitleColor = classes.done;\n    taskList = (\n      <ul>\n        {filteredDoneTask.map((task) => (\n          <TaskItem\n            id={task.id}\n            key={task.id}\n            state={task.state}\n            value={task.value}\n            onDelete={onDelete}\n            onChangeState={onToggle}\n          />\n        ))}\n      </ul>\n    );\n  }\n  if (props.title === '未完成') {\n    filteredNum = filteredTodoTask.length;\n    tabTitleColor = classes.todo;\n    taskList = (\n      <ul>\n        {filteredTodoTask.map((task) => (\n          <TaskItem\n            id={task.id}\n            key={task.id}\n            state={task.state}\n            value={task.value}\n            onDelete={onDelete}\n            onChangeState={onToggle}\n          />\n        ))}\n      </ul>\n    );\n  }\n\n  if (props.title === '全部') {\n    filteredNum = tasks.length;\n    tabTitleColor = classes.all;\n    taskList = (\n      <ul>\n        {tasks.map((task) => (\n          <TaskItem\n            id={task.id}\n            key={task.id}\n            value={task.value}\n            state={task.state}\n            onDelete={onDelete}\n            onChangeState={onToggle}\n          />\n        ))}\n      </ul>\n    );\n  }\n  return (\n    <div className={classes['tab-block']}>\n      <div className={classes.backdrop} onClick={closeNewTaskHandler}></div>\n      <div className={`${classes['tab-title']} ${tabTitleColor}`}>\n        <h2>{props.title}</h2>\n        <h2>{filteredNum}</h2>\n      </div>\n      {taskList}\n      {isShown && (\n        <NewTask addTask={addTaskHandler} onCloseNew={closeNewTaskHandler} />\n      )}\n      <div className={classes.actions}>\n        <button\n          className={classes['clean-done']}\n          onClick={onDeleteDone}\n        >\n          清除已完成項目\n        </button>\n        <button className={classes['button-add']} onClick={showNewTaskHandler}>\n          +\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskBlock;\n"]},"metadata":{},"sourceType":"module"}